{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"14JKVT9WRmTtM275ELp4yXx_hHY1BfyOZ","timestamp":1733734003924},{"file_id":"1tfKuUiM0dJhjlCpSyDgMk53LMm3OSLMo","timestamp":1733648204394}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"e_zVFiFvKjx7","executionInfo":{"status":"ok","timestamp":1734339428865,"user_tz":-120,"elapsed":21185,"user":{"displayName":"Gustav Nikopensius","userId":"16525106858546514449"}},"outputId":"8bedd3e9-be34-47e5-c88f-ab24a4e2ca4e"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","import os"]},{"cell_type":"code","source":["#Gustav:\n","os.chdir('/content/drive/My Drive/Colab Notebooks/Machine Learning/Project/') # Võib-olla tuleb seda pathi kohendada"],"metadata":{"id":"mra6dVkoZ7kS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","import os\n","filenames = [filename for filename in os.listdir() if \".csv\" in filename]\n","filenames\n","\n","weather1 = pd.read_csv(filenames[0])\n","weather2 = pd.read_csv(filenames[1])\n","power1 = pd.read_csv(filenames[3])\n","power1['DC_POWER'] = power1['DC_POWER'] / 10\n","power2 = pd.read_csv(filenames[2])\n","\n","weather1['DATE_TIME'] = pd.to_datetime(weather1['DATE_TIME'])\n","weather2['DATE_TIME'] = pd.to_datetime(weather2['DATE_TIME'])\n","power1['DATE_TIME'] = pd.to_datetime(power1['DATE_TIME'])\n","power2['DATE_TIME'] = pd.to_datetime(power2['DATE_TIME'])\n","dataset1 = pd.merge(weather1, power1, on=['DATE_TIME', 'PLANT_ID'])\n","dataset2 = pd.merge(weather2, power2, on=['DATE_TIME', 'PLANT_ID'])\n","df = pd.concat([dataset1, dataset2], axis=0).reset_index(drop=True)"],"metadata":{"id":"P-eDswNIeRTt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1734339432740,"user_tz":-120,"elapsed":3877,"user":{"displayName":"Gustav Nikopensius","userId":"16525106858546514449"}},"outputId":"0d673f36-a4eb-4031-a725-07dec5d6cc3a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-3-1168bf521e52>:14: UserWarning: Parsing dates in %d-%m-%Y %H:%M format when dayfirst=False (the default) was specified. Pass `dayfirst=True` or specify a format to silence this warning.\n","  power1['DATE_TIME'] = pd.to_datetime(power1['DATE_TIME'])\n"]}]},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","from sklearn.preprocessing import LabelEncoder, MinMaxScaler, StandardScaler\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import LSTM, Dense, Dropout\n","from tensorflow.keras.regularizers import l2\n","from tensorflow.keras.callbacks import EarlyStopping\n","\n","\n","# Reset dataset\n","df = pd.concat([dataset1, dataset2], axis=0).reset_index(drop=True)\n","\n","\n","# Assuming df is your DataFrame\n","# Encode categorical data\n","label_encoder = LabelEncoder()\n","df['PLANT_ID'] = label_encoder.fit_transform(df['PLANT_ID'])\n","df['SOURCE_KEY_x'] = label_encoder.fit_transform(df['SOURCE_KEY_x'])\n","df['SOURCE_KEY_y'] = label_encoder.fit_transform(df['SOURCE_KEY_y'])\n","\n","# Normalize numerical data\n","scaler = StandardScaler()\n","df[['AMBIENT_TEMPERATURE',\n","    'MODULE_TEMPERATURE',\n","    'IRRADIATION']] = scaler.fit_transform(df[['AMBIENT_TEMPERATURE',\n","                                            'MODULE_TEMPERATURE',\n","                                            'IRRADIATION']])\n","power_scaler = StandardScaler()\n","df['DC_POWER'] = power_scaler.fit_transform(df[['DC_POWER']])\n","\n","# Create sequences\n","def create_sequences(data, seq_length):\n","    xs, ys = [], []\n","    for i in range(len(data) - seq_length):\n","        x = data[i:i+seq_length]\n","        y = data[i+seq_length]\n","        xs.append(x)\n","        ys.append(y)\n","    return np.array(xs), np.array(ys)\n","\n","seq_length = 96\n","X, y = create_sequences(df[['AMBIENT_TEMPERATURE', 'MODULE_TEMPERATURE', 'IRRADIATION', 'SOURCE_KEY_x', 'SOURCE_KEY_y', 'PLANT_ID', 'DC_POWER']].values, seq_length)\n","y = df['DC_POWER'].values[seq_length:]\n","\n","# Split into train and test sets\n","split = int(0.8 * len(X))\n","X_train, X_test = X[:split], X[split:]\n","y_train, y_test = y[:split], y[split:]\n","\n","# Build LSTM model\n","model = Sequential()\n","model.add(LSTM(50, return_sequences=True, input_shape=(seq_length, X.shape[2]), kernel_regularizer=l2(0.1)))\n","model.add(Dropout(0.2))\n","model.add(LSTM(50, kernel_regularizer=l2(0.1)))\n","model.add(Dropout(0.2))\n","model.add(Dense(1))\n","\n","early_stopping = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)\n","\n","model.compile(optimizer='adam', loss='mse')\n","model.fit(X_train, y_train, epochs=10, batch_size=128, validation_split=0.2, callbacks=[early_stopping])\n","\n","# Evaluate the model\n","loss = model.evaluate(X_test, y_test)\n","print(f'Test Loss: {loss}')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ri09AQuDm4To","executionInfo":{"status":"ok","timestamp":1734349644079,"user_tz":-120,"elapsed":1454572,"user":{"displayName":"Gustav Nikopensius","userId":"16525106858546514449"}},"outputId":"60cc1a89-492d-4fa1-8974-1aa263e36648"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/keras/src/layers/rnn/rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(**kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 1/10\n","\u001b[1m682/682\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m142s\u001b[0m 194ms/step - loss: 2.4356 - val_loss: 0.3048\n","Epoch 2/10\n","\u001b[1m682/682\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m141s\u001b[0m 192ms/step - loss: 0.1488 - val_loss: 0.3178\n","Epoch 3/10\n","\u001b[1m682/682\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m142s\u001b[0m 193ms/step - loss: 0.1432 - val_loss: 0.2771\n","Epoch 4/10\n","\u001b[1m682/682\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m142s\u001b[0m 193ms/step - loss: 0.1365 - val_loss: 0.2660\n","Epoch 5/10\n","\u001b[1m682/682\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m141s\u001b[0m 192ms/step - loss: 0.1318 - val_loss: 0.2684\n","Epoch 6/10\n","\u001b[1m682/682\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m142s\u001b[0m 192ms/step - loss: 0.1294 - val_loss: 0.2623\n","Epoch 7/10\n","\u001b[1m682/682\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m131s\u001b[0m 192ms/step - loss: 0.1319 - val_loss: 0.2788\n","Epoch 8/10\n","\u001b[1m682/682\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m144s\u001b[0m 194ms/step - loss: 0.1309 - val_loss: 0.2762\n","Epoch 9/10\n","\u001b[1m682/682\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m134s\u001b[0m 196ms/step - loss: 0.1278 - val_loss: 0.2700\n","Epoch 10/10\n","\u001b[1m682/682\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m142s\u001b[0m 196ms/step - loss: 0.1243 - val_loss: 0.2671\n","\u001b[1m853/853\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m26s\u001b[0m 31ms/step - loss: 0.3670\n","Test Loss: 0.2707088589668274\n"]}]},{"cell_type":"code","source":["df.shape\n","df['SOURCE_KEY_y'].unique().shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DooVb8MFOsLg","executionInfo":{"status":"ok","timestamp":1733744622526,"user_tz":-120,"elapsed":243,"user":{"displayName":"Gustav Nikopensius","userId":"16525106858546514449"}},"outputId":"26aaaf00-6d46-4c18-9261-ac7c79d87939"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(44,)"]},"metadata":{},"execution_count":101}]},{"cell_type":"code","source":["import tensorflow as tf\n","\n","# Assuming y_true are the true values and y_pred are the predictions\n","y_pred = model.predict(X_test)  # Your predictions\n","\n","# Define R-squared function\n","def r2_score(y_true, y_pred):\n","    ss_res = tf.reduce_sum(tf.square(y_true - y_pred))\n","    ss_tot = tf.reduce_sum(tf.square(y_true - tf.reduce_mean(y_true)))\n","    return 1 - ss_res / ss_tot\n","\n","# Calculate and print R-squared\n","r2 = r2_score(y_test, y_pred)\n","print(f'R-squared: {r2.numpy()}')\n","\n","y_pred_original = power_scaler.inverse_transform(y_pred.reshape(-1, 1))\n","y_test_original = power_scaler.inverse_transform(y_test.reshape(-1, 1))\n","\n","# Define a different loss function, e.g., Mean Absolute Error\n","mae_loss = tf.keras.losses.MeanAbsoluteError()\n","\n","# Compute the loss\n","loss_value = mae_loss(y_test_original, y_pred_original).numpy()\n","print(f'Mean Absolute Error: {loss_value}')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":211},"id":"glayLc20wIoz","executionInfo":{"status":"error","timestamp":1734349882895,"user_tz":-120,"elapsed":26116,"user":{"displayName":"Gustav Nikopensius","userId":"16525106858546514449"}},"outputId":"dc5a43f3-6152-4ff6-d6d9-ab7e4806d685"},"execution_count":1,"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'model' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-bf373421991d>\u001b[0m in \u001b[0;36m<cell line: 4>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m# Assuming y_true are the true values and y_pred are the predictions\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0my_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# Your predictions\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;31m# Define R-squared function\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'model' is not defined"]}]},{"cell_type":"code","source":["y_test_original.mean()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AIjQCNAl7y-7","executionInfo":{"status":"ok","timestamp":1734343627712,"user_tz":-120,"elapsed":229,"user":{"displayName":"Gustav Nikopensius","userId":"16525106858546514449"}},"outputId":"211cc30a-7ffc-422c-bc9e-60844ed7496c"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["384.19635701700633"]},"metadata":{},"execution_count":24}]},{"cell_type":"code","source":["# Calculate std for y_test_original\n","std_y_test = np.std(y_test_original)\n","print(f'Standard Deviation of y_test: {std_y_test}')\n","# Calculate variance for y_test_original\n","variance_y_test = np.var(y_test_original)\n","print(f'Variance of y_test: {variance_y_test}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lea-Ral-1gfQ","executionInfo":{"status":"ok","timestamp":1734343592908,"user_tz":-120,"elapsed":210,"user":{"displayName":"Gustav Nikopensius","userId":"16525106858546514449"}},"outputId":"bb3b3be2-6bac-4f33-e0ea-a4b87bda0039"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Standard Deviation of y_test: 357.22905700590246\n","Variance of y_test: 127612.59916932632\n"]}]},{"cell_type":"code","source":["# plot y_test_original on a histogram\n","\n","import matplotlib.pyplot as plt\n","\n","plt.hist(y_test_original, bins=30, alpha=0.5, label='y_test')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":668},"id":"GC99U52s19gb","executionInfo":{"status":"ok","timestamp":1734342088941,"user_tz":-120,"elapsed":717,"user":{"displayName":"Gustav Nikopensius","userId":"16525106858546514449"}},"outputId":"f249b195-ffa7-48ae-abaa-73f6319c108b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(array([15346.,   909.,   829.,   748.,   640.,   698.,   537.,   559.,\n","          441.,   562.,   764.,   620.,   636.,   555.,   517.,   384.,\n","          329.,   286.,   244.,   209.,   187.,   184.,   236.,   210.,\n","          186.,   191.,   114.,    76.,    52.,    27.]),\n"," array([   0.        ,   47.36444444,   94.72888889,  142.09333333,\n","         189.45777778,  236.82222222,  284.18666667,  331.55111111,\n","         378.91555556,  426.28      ,  473.64444444,  521.00888889,\n","         568.37333333,  615.73777778,  663.10222222,  710.46666667,\n","         757.83111111,  805.19555556,  852.56      ,  899.92444444,\n","         947.28888889,  994.65333333, 1042.01777778, 1089.38222222,\n","        1136.74666667, 1184.11111111, 1231.47555556, 1278.84      ,\n","        1326.20444444, 1373.56888889, 1420.93333333]),\n"," <BarContainer object of 30 artists>)"]},"metadata":{},"execution_count":18},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAAjkAAAGgCAYAAABIanZ7AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy81sbWrAAAACXBIWXMAAA9hAAAPYQGoP6dpAAA0KklEQVR4nO3de3RU5b3/8U9CyAVwJlyaDFMDptVyEQoICqNI6yElStSm0lYwAqemcrCJEqDcDkqxVaPhWAS1UNoeca1CQc6SVMEG06BEJQYIRCBCwFOEeJmk/YXMCEoI5Pn90ZNdRhC5TAx58n6ttddy9vPdez/fAJmPT2bvRBhjjAAAACwT2dITAAAAaA6EHAAAYCVCDgAAsBIhBwAAWImQAwAArETIAQAAViLkAAAAKxFyAACAlQg5AADASoQcAABgpfMOOcXFxbrtttvk9XoVERGh/Pz802r27Nmj22+/XW63Wx07dtS1116rQ4cOOePHjh1TVlaWunbtqk6dOmnMmDGqrq4OOcehQ4eUlpamDh06KCEhQTNmzNCJEydCal5//XVdc801iomJ0ZVXXqnly5efbzsAAMBSUed7wNGjRzVgwADdc889uuOOO04b/9///V8NHz5cmZmZevjhh+VyuVRRUaHY2FinZurUqVq/fr3WrFkjt9ut7Oxs3XHHHXrrrbckSSdPnlRaWpo8Ho82b96sjz/+WBMmTFD79u312GOPSZIOHDigtLQ0TZ48WStWrFBRUZF++tOfqnv37kpNTT2nXhobG/XRRx/psssuU0RExPl+KQAAQAswxuiTTz6R1+tVZORZ1mvMRZBk1q5dG7LvzjvvNHffffcXHlNXV2fat29v1qxZ4+zbs2ePkWRKSkqMMca88sorJjIy0vj9fqdmyZIlxuVymfr6emOMMTNnzjRXX331addOTU095/lXVVUZSWxsbGxsbGytcKuqqjrr+/x5r+ScTWNjo9avX6+ZM2cqNTVVO3bsUHJysubMmaP09HRJUllZmRoaGpSSkuIc17t3b/Xo0UMlJSUaNmyYSkpK1L9/fyUmJjo1qampuu+++1RRUaFBgwappKQk5BxNNTk5OV84v/r6etXX1zuvzf/9Avaqqiq5XK4wfAUAAEBzCwaDSkpK0mWXXXbWurCGnJqaGh05ckSPP/64HnnkET3xxBMqKCjQHXfcoddee03f+c535Pf7FR0drfj4+JBjExMT5ff7JUl+vz8k4DSNN42drSYYDOqzzz5TXFzcafPLzc3Vww8/fNp+l8tFyAEAoJX5so+ahPXuqsbGRknS97//fU2dOlUDBw7U7Nmzdeutt2rp0qXhvNQFmTNnjgKBgLNVVVW19JQAAEAzCWvI6datm6KiotS3b9+Q/X369HHurvJ4PDp+/Ljq6upCaqqrq+XxeJyaz99t1fT6y2pcLtcZV3EkKSYmxlm1YfUGAAC7hTXkREdH69prr1VlZWXI/n379qlnz56SpMGDB6t9+/YqKipyxisrK3Xo0CH5fD5Jks/n065du1RTU+PUFBYWyuVyOQHK5/OFnKOppukcAACgbTvvz+QcOXJE7733nvP6wIEDKi8vV5cuXdSjRw/NmDFDd955p0aMGKGbbrpJBQUFevnll/X6669LktxutzIzMzVt2jR16dJFLpdL999/v3w+n4YNGyZJGjVqlPr27avx48crLy9Pfr9fDz74oLKyshQTEyNJmjx5sp555hnNnDlT99xzjzZu3KgXXnhB69evD8OXBQAAtHrnfL/1/3nttdfOeBvXxIkTnZo//OEP5sorrzSxsbFmwIABJj8/P+Qcn332mfnZz35mOnfubDp06GB+8IMfmI8//jik5v333ze33HKLiYuLM926dTPTp083DQ0Np81l4MCBJjo62nzjG98wzz333Hn1EggEjCQTCATO6zgAANByzvX9O8KY/7uPug0KBoNyu90KBAJ8PgcAgFbiXN+/+d1VAADASoQcAABgJUIOAACwEiEHAABYiZADAACsRMgBAABWIuQAAAArEXIAAICVzvvXOuDcLCzcd8HHTv3et8I4EwAA2iZWcgAAgJUIOQAAwEqEHAAAYCVCDgAAsBIhBwAAWImQAwAArETIAQAAViLkAAAAKxFyAACAlQg5AADASoQcAABgJUIOAACwEiEHAABYiZADAACsRMgBAABWIuQAAAArEXIAAICVCDkAAMBKhBwAAGAlQg4AALASIQcAAFiJkAMAAKxEyAEAAFYi5AAAACsRcgAAgJUIOQAAwErnHXKKi4t12223yev1KiIiQvn5+V9YO3nyZEVEROipp54K2V9bW6uMjAy5XC7Fx8crMzNTR44cCanZuXOnbrzxRsXGxiopKUl5eXmnnX/NmjXq3bu3YmNj1b9/f73y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dcUVVyg2NlZDhw7Vli1bWnpKFy03N1fXXnutLrvsMiUkJCg9PV2VlZUhNceOHVNWVpa6du2qTp06acyYMac9rPHQoUNKS0tThw4dlJCQoBkzZujEiRNfZSsX7fHHH1dERIRycnKcfTb3/uGHH+ruu+9W165dFRcXp/79+2vbtm3OuDFG8+bNU/fu3RUXF6eUlBTt378/5By1tbXKyMiQy+VSfHy8MjMzdeTIpf/73U6ePKmHHnpIycnJiouL0ze/+U396le/Cvl9OTb1X1xcrNtuu01er1cRERHKz88PGQ9Xrzt37tSNN96o2NhYJSUlKS8vr7lb+1Jn672hoUGzZs1S//791bFjR3m9Xk2YMEEfffRRyDlaa+/Sl//Zn2ry5MmKiIjQU089FbL/kuzfIKxWrVploqOjzX//93+biooKc++995r4+HhTXV3d0lO7KKmpqea5554zu3fvNuXl5Wb06NGmR48e5siRI07N5MmTTVJSkikqKjLbtm0zw4YNM9dff70zfuLECdOvXz+TkpJiduzYYV555RXTrVs3M2fOnJZo6YJs2bLFXHHFFebb3/62mTJlirPf1t5ra2tNz549zb//+7+b0tJS87e//c1s2LDBvPfee07N448/btxut8nPzzfvvPOOuf32201ycrL57LPPnJqbb77ZDBgwwLz99tvmjTfeMFdeeaUZN25cS7R0Xh599FHTtWtXs27dOnPgwAGzZs0a06lTJ7No0SKnxqb+X3nlFTN37lzz4osvGklm7dq1IePh6DUQCJjExESTkZFhdu/ebf70pz+ZuLg489vf/varavOMztZ7XV2dSUlJMatXrzZ79+41JSUl5rrrrjODBw8OOUdr7d2YL/+zb/Liiy+aAQMGGK/XaxYuXBgydin2T8gJs+uuu85kZWU5r0+ePGm8Xq/Jzc1twVmFX01NjZFkNm3aZIz55zeB9u3bmzVr1jg1e/bsMZJMSUmJMeaf/4giIyON3+93apYsWWJcLpepr6//ahu4AJ988om56qqrTGFhofnOd77jhBybe581a5YZPnz4F443NjYaj8djFixY4Oyrq6szMTEx5k9/+pMxxph3333XSDJbt251av7yl7+YiIgI8+GHHzbf5MMgLS3N3HPPPSH77rjjDpORkWGMsbv/z7/RhavX3/zmN6Zz584hf+9nzZplevXq1cwdnbuzvck32bJli5FkDh48aIyxp3djvrj/Dz74wHz96183u3fvNj179gwJOZdq//y4KoyOHz+usrIypaSkOPsiIyOVkpKikpKSFpxZ+AUCAUlSly5dJEllZWVqaGgI6b13797q0aOH03tJSYn69+8f8rDG1NRUBYNBVVRUfIWzvzBZWVlKS0sL6VGyu/eXXnpJQ4YM0Y9+9CMlJCRo0KBB+t3vfueMHzhwQH6/P6R3t9utoUOHhvQeHx+vIUOGODUpKSmKjIxUaWnpV9fMBbj++utVVFSkffv2SZLeeecdvfnmm7rlllsk2d//qcLVa0lJiUaMGKHo6GinJjU1VZWVlTp8+PBX1M3FCwQCioiIcH7/oe29NzY2avz48ZoxY4auvvrq08Yv1f4JOWH0j3/8QydPnjzticuJiYny+/0tNKvwa2xsVE5Ojm644Qb169dPkuT3+xUdHX3aLzw9tXe/33/Gr03T2KVs1apV2r59u3Jzc08bs7n3v/3tb1qyZImuuuoqbdiwQffdd58eeOABPf/885L+Nfez/Z33+/1KSEgIGY+KilKXLl0u6d4lafbs2Ro7dqx69+6t9u3ba9CgQcrJyVFGRoYk+/s/Vbh6ba3/Fk517NgxzZo1S+PGjXN+IaXtvT/xxBOKiorSAw88cMbxS7X/Vv1rHdAysrKytHv3br355pstPZWvRFVVlaZMmaLCwkLFxsa29HS+Uo2NjRoyZIgee+wxSdKgQYO0e/duLV26VBMnTmzh2TW/F154QStWrNDKlSt19dVXq7y8XDk5OfJ6vW2if5yuoaFBP/7xj2WM0ZIlS1p6Ol+JsrIyLVq0SNu3b1dERERLT+e8sJITRt26dVO7du1Ou6umurpaHo+nhWYVXtnZ2Vq3bp1ee+01XX755c5+j8ej48ePq66uLqT+1N49Hs8ZvzZNY5eqsrIy1dTU6JprrlFUVJSioqK0adMmLV68WFFRUUpMTLS29+7du6tv374h+/r06aNDhw5J+tfcz/Z33uPxqKamJmT8xIkTqq2tvaR7l6QZM2Y4qzn9+/fX+PHjNXXqVGdFz/b+TxWuXlvrvwXpXwHn4MGDKiwsdFZxJLt7f+ONN1RTU6MePXo43wMPHjyo6dOn64orrpB06fZPyAmj6OhoDR48WEVFRc6+xsZGFRUVyefzteDMLp4xRtnZ2Vq7dq02btyo5OTkkPHBgwerffv2Ib1XVlbq0KFDTu8+n0+7du0K+YfQ9I3i82+kl5KRI0dq165dKi8vd7YhQ4YoIyPD+W9be7/hhhtOe1TAvn371LNnT0lScnKyPB5PSO/BYFClpaUhvdfV1amsrMyp2bhxoxobGzV06NCvoIsL9+mnnyoyMvTbZLt27dTY2CjJ/v5PFa5efT6fiouL1dDQ4NQUFhaqV69e6ty581fUzflrCjj79+/XX//6V3Xt2jVk3Obex48fr507d4Z8D/R6vZoxY4Y2bNgg6RLuv9k+0txGrVq1ysTExJjly5ebd99910yaNMnEx8eH3FXTGt13333G7Xab119/3Xz88cfO9umnnzo1kydPNj169DAbN24027ZtMz6fz/h8Pme86TbqUaNGmfLyclNQUGC+9rWvXfK3UZ/JqXdXGWNv71u2bDFRUVHm0UcfNfv37zcrVqwwHTp0MH/84x+dmscff9zEx8ebP//5z2bnzp3m+9///hlvKx40aJApLS01b775prnqqqsuyVuoP2/ixInm61//unML+Ysvvmi6detmZs6c6dTY1P8nn3xiduzYYXbs2GEkmV//+tdmx44dzh1E4ei1rq7OJCYmmvHjx5vdu3ebVatWmQ4dOrT4bdRn6/348ePm9ttvN5dffrkpLy8P+R546p1CrbV3Y778z/7zPn93lTGXZv+EnGbw9NNPmx49epjo6Ghz3XXXmbfffrulp3TRJJ1xe+6555yazz77zPzsZz8znTt3Nh06dDA/+MEPzMcffxxynvfff9/ccsstJi4uznTr1s1Mnz7dNDQ0fMXdXLzPhxybe3/55ZdNv379TExMjOndu7dZtmxZyHhjY6N56KGHTGJioomJiTEjR440lZWVITX/7//9PzNu3DjTqVMn43K5zE9+8hPzySeffJVtXJBgMGimTJlievToYWJjY803vvENM3fu3JA3Npv6f+21187473zixInGmPD1+s4775jhw4ebmJgY8/Wvf908/vjjX1WLX+hsvR84cOALvwe+9tprzjlaa+/GfPmf/eedKeRciv1HGHPKozsBAAAswWdyAACAlQg5AADASoQcAABgJUIOAACwEiEHAABYiZADAACsRMgBAABWIuQAAAArEXIAAICVCDkAAMBKhBwAAGAlQg4AALDS/wflGgi5NCik+gAAAABJRU5ErkJggg==\n"},"metadata":{}}]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","from sklearn.preprocessing import LabelEncoder, StandardScaler\n","from sklearn.model_selection import train_test_split\n","from xgboost import XGBRegressor\n","from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n","\n","# Reset dataset\n","df = pd.concat([dataset1, dataset2], axis=0).reset_index(drop=True)\n","\n","# Assuming df is your DataFrame\n","# Encode categorical data\n","label_encoder = LabelEncoder()\n","df['PLANT_ID'] = label_encoder.fit_transform(df['PLANT_ID'])\n","df['SOURCE_KEY_x'] = label_encoder.fit_transform(df['SOURCE_KEY_x'])\n","df['SOURCE_KEY_y'] = label_encoder.fit_transform(df['SOURCE_KEY_y'])\n","\n","# Normalize numerical data\n","scaler = StandardScaler()\n","df[['AMBIENT_TEMPERATURE',\n","    'MODULE_TEMPERATURE',\n","    'IRRADIATION']] = scaler.fit_transform(df[['AMBIENT_TEMPERATURE',\n","                                            'MODULE_TEMPERATURE',\n","                                            'IRRADIATION']])\n","power_scaler = StandardScaler()\n","df['DC_POWER'] = power_scaler.fit_transform(df[['DC_POWER']])\n","\n","# Split data into features and target\n","X = df[['AMBIENT_TEMPERATURE', 'MODULE_TEMPERATURE', 'IRRADIATION', 'PLANT_ID', 'SOURCE_KEY_x', 'SOURCE_KEY_y']]\n","y = df['DC_POWER']\n","\n","# Train-test split\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","from sklearn.model_selection import GridSearchCV\n","from xgboost import XGBRegressor\n","\n","# Define the parameter grid\n","param_grid = {\n","    'n_estimators': [50, 100],\n","    'learning_rate': [0.01, 0.1],\n","    'max_depth': [3, 5],\n","    'min_child_weight': [1, 3],\n","    'subsample': [0.8],\n","    'colsample_bytree': [0.8],\n","    'gamma': [0, 0.1],\n","    'reg_alpha': [0, 0.01],\n","    'reg_lambda': [0.1, 1.0]\n","}\n","\n","\n","# Initialize the XGBRegressor\n","xgb_model = XGBRegressor(random_state=42)\n","\n","# Set up the GridSearchCV\n","grid_search = GridSearchCV(estimator=xgb_model, param_grid=param_grid, cv=3, scoring='neg_mean_absolute_error', verbose=1, n_jobs=-1)\n","\n","# Fit the model\n","grid_search.fit(X_train, y_train)\n","\n","# Get the best parameters\n","best_params = grid_search.best_params_\n","print(f'Best parameters found: {best_params}')\n","\n","# Evaluate the best model\n","best_model = grid_search.best_estimator_\n","y_pred = best_model.predict(X_test)\n","\n","# Inverse transform the predictions and true values\n","y_pred_original = power_scaler.inverse_transform(y_pred.reshape(-1, 1))\n","y_test_original = power_scaler.inverse_transform(y_test.values.reshape(-1, 1))\n","\n","# Evaluate the model\n","mae = mean_absolute_error(y_test_original, y_pred_original)\n","rmse = np.sqrt(mean_squared_error(y_test_original, y_pred_original))\n","r2 = r2_score(y_test_original, y_pred_original)\n","\n","print(f'Mean Absolute Error: {mae}')\n","print(f'Root Mean Squared Error: {rmse}')\n","print(f'R-squared: {r2}')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yoNZ-hME_mcV","executionInfo":{"status":"ok","timestamp":1733741215583,"user_tz":-120,"elapsed":172382,"user":{"displayName":"Gustav Nikopensius","userId":"16525106858546514449"}},"outputId":"154b5a63-cdda-4125-9892-717e8351f0a7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting 3 folds for each of 128 candidates, totalling 384 fits\n","Best parameters found: {'colsample_bytree': 0.8, 'gamma': 0, 'learning_rate': 0.1, 'max_depth': 5, 'min_child_weight': 1, 'n_estimators': 100, 'reg_alpha': 0.01, 'reg_lambda': 0.1, 'subsample': 0.8}\n","Mean Absolute Error: 53.28892765389583\n","Root Mean Squared Error: 145.41367384903904\n","R-squared: 0.8607576697432111\n"]}]}]}